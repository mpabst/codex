for now, keep callee vars pointing to caller and
copy Bindings to scope on allocate(). we can avoid this copy if we reverse that reference direction, and have caller vars point to callee vars, but then we need to disambiguate which callee.

trail qs:
what happens on call returns?
- if we're copying out args back to caller's pending/calleeArgs, then maybe just restore trailP without unbinding?
what happens when we backtrack up the call stack?
maybe want to work out how arg passing and return works first
how does it work in the WAM?

stuff i need:
module-level signatures, map of head pattern -> expressing clause or EDB
new memo class: complete inargs in canonical order -> list of outargs, var set can vary to include only unbound at call
- can rework BindingsSet
Query -> Machine, Program -> Query (plus varMap?), Store has Map of compiled Queries, calls jump over to them
combine OR and AND stacks
new IDB compiler

don't need:
clause.signature, Generator

caller    callee   IDB
new var   const    bind l := r
old var   const    check equality
const     const    check, no instr
new var   new var  bind r := l
old var   new var  bind r := l
const     new var  r := l
new var   old var  bind l := r
old var   old var  check equality
const     old var  ditto

initPending before first line querying a clause; call after last such line

choicepoints need to restore section and instruction? not if
everything is in a single chunk of memory

every line produces a choice point on the graph term at first,
eliminate it afterwards if there's only one match?

try me else ( next graph option )
set clause or set index
IDB instructions from above

collect options for matching a line
sort
label with calls and inits
produce instructions
