# the runtime can locate all sessions without cross-graph
# queries by flagging things at build time
<> a fp:Session.

[ a fp:Pipe ;
  fp:source <App>;
  # Define fragment as being a graph which is the subgraph rooted at that node?
  # Do with macros? If we're GUIfying then maybe just a Pipe param would be fine
  fp:dest system:DOM#root-node ].

[ a fp:Pipe ;
  fp:source todo:App#logs ;
  fp:dest system:stdout ].

[ a fp:Pipe ;
  fp:source todo:App#errors ;
  fp:dest system:stderr ].

# I don't think this needs to be explicitly declared in the session, it's
# inferred automatically from the meta on user:todos itself. along with every
# other graph, possibly internal to the import graph, that we need updates on we
# also need a second session, which manages the server's subscriptions to our
# updates
[ a fp:Pipe ;
  fp:source user:todos ;
  fp:dest [
    a fp:Remote ;
    # just use the IRI of the graph itself; can also
    # have an #authority node in the graph meta
    fp:iri user:todos
  ]
  # network opts live alongside dest, not within it, for orthogonality
].

# maybe omit the fp:what and even fp:where if they're all the same as fp:dest
[ a fp:Subscription ;
  # I had fp:where, but I don't think it's necessary, as a Session represents
  # a pairing of two nodes, one of which is declared the controller, and all
  # Subs are assumed to be relative to that controller. maybe use authority of
  # the Session graph? sure, it fits
  # though, what about local subs, like the pipes above? ig we need either two types
  # of subs or two types of endpoint, and i'd rather do the latter, so Remotes it is.
  # when we send our updates, we write to a resource on the remote representing their
  # incoming event stream, and the subscription configured there tells the system
  # what to do with the events
  fp:source [ a fp:Remote ; fp:what user:todos ] ;
  fp:sink user:todos ;
  fp:behavior fp:fast-forward-merge ].
# if we want to pass opts to fast-forward-merge, we can treat it like a class
# maybe ditch capitalized class names if we want them to do double duty?

[ a fp:Subscription ;
  fp:source [ a fp:Remote ; fp:what user:todos ] ;
  fp:dest user:todos ].

# how do we handle remotes? do we keep it in a separate local module
# intance, a la git branches? does the remote have its own mirror of
# our copy? what exactly gets modified and when? should we do without
# the mirrors?
# yes to mirrors, a 'write' is really a write to the remote heads graph

# maybe start out with a desired runtime config, incl everything that
# would be codegenned or inferred

# we probably want to write, from a dev's perspective, a single app
# description, then add a distribution scheme which designates one
# node as the authority/server and another as the user/client

# the fact that user:todos is replicated should be hidden, though
# still accessible, a la Git tracking references.

# what would a distribution scheme look like? how much can be automatically inferred?
# all we really need to know is that one node is the authority, and thus needs to
# get updates, and moreover their notion of the current version of a graph is, well,
# authoritative
