@base <https://fingerpaint.systems/apps/todo#> .
@prefix : <https://fingerpaint.systems/apps/todo#> .
@prefix fpc: <https://fingerpaint.systems/core#> .
@prefix html: <https://fingerpaint.systems/core/html#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

:createTodo :: ?label out =
  [ a :Todo ; rdfs:label ?label ]
<-
  :system { fpc:tick rdfs:label ?label } .

# check to make sure it results in a valid state: what can we check statically,
# what do we need dynamic checks for, consistency, etc?
# mode system ensures anon params are unbound and invocation
:removeTodo :: ?todo :Todo in = - { ?todo ?_ ?_ } .
  
# treat the rule name like any other subject; tilde replaces semicolon as
# introducing next segment in the rule def. adding extra properties to the
# rule in this way can be used like decorators in other languages; rest of
# def converts to properties on the rule name a la my prev syntax, which
# ig you could still use
:TodoView a fpc:View :: ?todo :Todo in =
  [ a html:li ; html:children ( [ html:text ?label ] ) ]
<-
  ?todo rdfs:label ?label .

# alternate form:
:TodoView a fpc:View :: ?todo :Todo in =
# slim-based syntax (pug?)
  li ?label
<-
  ?todo rdfs:label ?label .

:TodoList a fpc:View =
  ul ?children
<-

  a fpc:View ;
  fpc:head << [ a html:ul ; html:children ?child ] >> ;
  fpc:body <<
    ?child
      a fpc:FindAll ;
      fpc:query << ?todo a <TodoView> >> ;
      fpc:get ?todo 
  >> .

<CreateTodoButton>
  a fpc:View ;
  fpc:head << [
    a html:button ;
    html:onClick <createTodo> ;
    html:children ( [ html:text "new todo"@en ] )
  ] >> .

<MainView>
  a fpc:View ;
  fpc:head << [
    a html:div ;
    html:children ( ?button, ?list )
  ] >> ;
  fpc:body <<
    ?button a <CreateTodoButton> .
    ?list a <TodoList> .
  >> .

{ ?_ a fpc:View ; fpc:head ?head ; fpc:body ? body } => { ?head <= ?body }
